generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  available
  availableButHidden
  unavailable
}

model User {
  id            String     @id @default(cuid())
  name          String?
  username      String?    @unique
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  status        UserStatus @default(unavailable)
  introduction  String?
  stripeLink    String?
  price         Int?
  accounts      Account[]
  sessions      Session[]
  works         Work[]     @relation("CreatorWorks")
  requests      Work[]     @relation("RequesterWorks")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Work {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  description     String
  budget          Int
  status          WorkStatus @default(requested)
  deliveryFileUrl String?
  paymentUrl      String?
  creatorId       String
  requesterId     String
  creator         User       @relation("CreatorWorks", fields: [creatorId], references: [id])
  requester       User       @relation("RequesterWorks", fields: [requesterId], references: [id])
}

enum WorkStatus {
  requested
  rejected
  delivered
  completed
} 